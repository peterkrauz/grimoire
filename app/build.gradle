plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'

    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
}

def firebaseBetaGroups = System.getenv("FIREBASE_TESTERS")
def firebaseBetaTesters = System.getenv("TESTER_GROUP_ALIAS")

android {
    compileSdkVersion AndroidConfig.compileSdkVersion
    buildToolsVersion AndroidConfig.buildToolsVersion

    defaultConfig {
        applicationId AndroidConfig.applicationId
        minSdkVersion AndroidConfig.minSdkVersion
        targetSdkVersion AndroidConfig.targetSdkVersion
        versionCode AndroidConfig.versionCode
        versionName "${AndroidConfig.majorVersion}.${AndroidConfig.mediumVersion}.${generateVersionCode()}"
        testInstrumentationRunner AndroidConfig.testInstrumentationRunner
        ext.betaDistributionGroupAliases = firebaseBetaGroups

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental": "true"
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Grimoire"
            firebaseAppDistribution {
                releaseNotesFile = "releasenotes.txt"
            }
        }
        beta {
            initWith debug
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
            resValue "string", "app_name", "Grimoire Beta"
            firebaseAppDistribution {
                releaseNotesFile = "releasenotes.txt"
                testers = firebaseBetaTesters
                groups = firebaseBetaGroups
            }
        }
    }

    compileOptions {
        sourceCompatibility = AndroidConfig.javaVersion
        targetCompatibility = AndroidConfig.javaVersion
    }
    kotlinOptions {
        jvmTarget = AndroidConfig.jvmTarget
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation Kotlin.standardLibrary
    implementation Android.coreKtx
    implementation Android.appCompat
    implementation Android.constraintLayout
    implementation Material.material
    implementation Navigation.navigationUi
    implementation Navigation.navigationFragment
    implementation Firebase.analytics
    implementation Firebase.crashlytics
    implementation Android.lifeCycleExtensions

    implementation Hilt.android
    implementation Hilt.viewModel
    kapt Hilt.compiler
    kapt Hilt.androidXCompiler

    kapt Room.compiler

    implementation project(ModulePaths.data)
    implementation project(ModulePaths.domain)
    implementation project(ModulePaths.common)
    implementation project(ModulePaths.home)
    implementation project(ModulePaths.tags)
    implementation project(ModulePaths.notes)
    implementation project(ModulePaths.characters)
}

static def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim()
    if(result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim()
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform: cmd output: ${result.text}")
    return result.toInteger()
}